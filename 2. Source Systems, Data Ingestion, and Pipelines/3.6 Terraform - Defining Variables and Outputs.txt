In this video, I'd like
to continue working on the same Terraform
configuration file we started with in
the previous video. Here we'll look at how to create input variables for
your configuration, how you can export your
resource information using output values, and how you can organize
your Terraform workspace. In the previous video, I incorporated some
hard coded values inside the configuration file, such as the region name and
the EC two instance name. Instead of hard coded values
inside your code blocks, you can create input variables to parametize your
configuration. These of input variables allows you to customize your
infrastructure and specify different values for your variables when
you want to create your resources instead of manually editing your
configuration files. In this example, under the
input variable section, I'm going to create one variable that represents the region name, and another one that
represents the server's name, you can declare
these variables like this using the variable keyword. Here, the strings region and server name represent the
name of each variable, which acts as identifiers for the variables inside the
Terraform configuration file. Each variable has three
optional arguments, a description that documents
the purpose of the variable, the type of the variable, and a default value assigned
to the variable. If you don't assign a default
value for the variable, then you'll be
prompted to specify its value before Terraform
applies to configuration. Now, to use these
variables in other blocks, you can refer to each variable using the syntax
var.variable_name. Here in the provider block, I replace the hard
coded value of the aws region with var.region. In the resource block, I replace the hard
coded value of the instance name with
var.server_underscore name. To automatically assign values to the variables
without being prompted, you can use the command line
flag _var as shown here. Or more conveniently, you can define the values
of the variables in a specific file that
has.tfvars as a extension. Here in the same directory that contains the configuration file. I'm going to create the
file terraform.tfvars, and inside this file, I'm going to assign a value to the variable server
underscore name. Now, to update the file, you can just use the command
Terraform apply. Terraform will use the file
that ends with.tfvars extract the values of the
variables and update the configuration with
the provided values. Since I assigned the same
name for the EC2 instance, Terraform did not find any changes that
needed to be updated. Now, any resource that
you create will contain a list of characteristics
or attributes. For example, you can check the documentation of
the EC2 instance. You can see a list of
all of its attributes, such as ID instance, it's ARN, which sends for Amazon resource name and
its public IP address. In some cases, you might want
to export these attributes. For example, you could print
them in the command line, use them in other parts
of your infrastructure or reference them in other
Terraform work spaces. To do this, you need to
declare them as output values. I'm going to create two
output values to export the ID and ARN of
the EC2 instance. The strings, server
underscore ID and server underscore ARN that come after the output keyboard
represent the names or the identifiers for
these output values. For each output value, you need to specify
the value argument by assigning it to the attribute
of the EC2 instance. You can access the attributes by specifying the identifier
for the resource, which is the resource
type dot resource name, then using the dot
attribute syntax to get the value
of the attribute. In this example, to access
the ID attribute of the EC2 instance, I'm using
aws_instance.webserver.id. I did the same for
the ARN attribute. Now, let's see how
you can access the output values in
the command line. First, let's apply
the updates by running the Terraform
apply command. Here, you can see that Terraform detect the changes to outputs, and it's telling you that it's going to create
those output values. Here, I'll type yes. You can see the
outputs displayed in the Terraform message. After you create the outputs, you can use the Terraform output command to query all of them, or you can query an
individual output by specifying its name. Right now, I have several blocks in this configuration file, where each block has
a different purpose. But what if you have
more than one resource with several input variables
and several output values? If you declare all the
blocks in one file, then at some point, managing the file will become
very cumbersome. The better practice is to split this configuration file into several files like
I'm showing here. You declare all your input
variables in variables.tf, all your output
values in output.tf, all of your providers
and providers.tf, and all of your
resources in main.tf. You can also further
divide main.tf, where you declare each resource
in a separate TF file. Terraform will automatically concatenate all the files at end with.tf as if you've written
all of them in one file. Here I'm going to create
the three new files, variables.tf, providers.tf,
and outputs.tf. Then I'm going to
move the variables to the variable file. The output values
to the output file. Finally, the Terraforms
settings and provider blocks to the provider's file. Creating input variables and
organizing your workspace in Terraform like this helps you maintain your
infrastructure. In the next video, I'll show you how to use modules to organize
your workspace and how to declare data
sources. I'll see you there.