So far, we've been
talking about choosing tools and technologies
for your architecture, and I've emphasized
that, in general, building on the Cloud with
flexible pay-as-you-go services will be your best bet for the vast majority
of companies, when it comes to
common services, like, say object storage. Using a Cloud service
like Amazon's S3 is a much better choice
than attempting to build your own custom
object storage solution. However, depending on the
requirements of your system, there may be certain
tools or technologies that you need to build out
and customize yourself. For example, many teams
elect to build on top of Open-Source frameworks to get exactly the
solution they need. In other cases, a
team might choose to build their own
solution or customize Open-Source frameworks to avoid licensing fees or simply avoid being at the
mercy of a vendor. In fact, for
essentially all stages of the data engineering
life cycle, you'll have a range
of options when it comes to choosing tools
and technologies. Of course, for any
tool you need, you can just build
something from scratch. In some cases, this might
be your only option if you're attempting
to do something that no one else
has done before. But for most cases, however, this is not recommended
unless you are certain there's no existing solution out there for the thing
you're trying to do. Building technologies
from scratch when off the shelf solutions already exist can amount to reinventing the
wheel, so to speak. You'll hear me refer
to this activity as undifferentiated
heavy lifting in the sense that it's hard work, and it probably
doesn't ultimately add value for your organization. When it comes to
existing solutions, these include fully
Open-Source options, as well as commercial Open-Source
options from vendors, which are essentially
a managed version of some Open-Source tool. Then there may also be proprietary non
Open-Source software and services to choose from. When it comes to choosing
between these options, there are several key parameters
you need to consider. First off, if you elect to go with a fully
Open-Source solution, does your team have
the bandwidth and capabilities to implement
and maintain that system? Many Open-Source tools
have a great community supporting them where you
can get help if you need it. But if you're part
of a small team, maybe even a team of one, then it's possible
that a managed Open-Source or
proprietary service will better suit your needs. That's because it can
free you up to build and manage your entire data system without getting
stuck in the wheels, deploying, and maintaining
a single component. Beyond that, even if your team does have
the expertise and bandwidth to build
from scratch and implement an
Open-Source solution. Is it really worth it? On the surface,
building something yourself or using an
Open-Source solution might seem like a cost savings because you're avoiding
licensing fees. But the total cost of ownership, as we talked about
in the last video, it's much more than
just licensing costs. It also includes the cost of the team required to build
and maintain the system. In addition to costs, the other important point to consider is whether
building out and maintaining a custom or
Open-Source solution actually provides value
for your organization. In other words, do you get
some advantage by building your own system or using Open-Source over what you would get with a
managed service, or is it just undifferentiated
heavy lifting? In other words,
just hard work that doesn't provide any
additional value. For most teams and
particularly small teams building data pipelines and wondering whether
to build their own, use Open-Source or purchase commercial Open-Source
or proprietary tools. My suggestion would
be to first look at Open-Source or commercial
Open-Source solutions, and if you can't
get what you need, look at buying a
proprietary solution. Plenty of great
modular services are available to choose
from in either case. This will allow your
team to focus on the unique opportunities that provide the most value
to your organization. Join me in the next video for a look at the differences
between so called serverless versus server options for tools and technologies.