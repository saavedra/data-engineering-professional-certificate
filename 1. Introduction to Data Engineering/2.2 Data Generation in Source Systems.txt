The first stage of the data
engineering life cycle is the generation of
data and source systems. Your role as a data engineer, you'll be consuming data
from various sources. For example, if you're working
at an e-commerce company, you might build a data
pipeline that consumes sales transaction data from an internal sales database and product catalog
data from files. The marketing team might need you to get social
media data from an API and market
research datasets from a data sharing platform. You might even find yourself
working with data from Internet of things
or IoT devices, such as GPS trackers to gather location and movement data
for product delivery updates. These systems are
typically created and maintained by other teams, including software engineers from other internal departments, external vendors or
third party platforms. As a data engineer, they're largely out
of your control. But it's important to understand how these systems work because data pipelines you build will rely on the data generated
from these sources. Let's start by taking a
closer look at a few of the common source systems you'll be working with as
a data engineer. The most common source
systems are databases, which could be
relational databases, represented as tables
of related data, like you see here, or other
types of NoSQL systems, including things like
key value databases, document stores, and more. These databases might be part of the back end of a web
or mobile application, or you could be storing data
from some other system, and don't worry if
you're not already familiar with a different
types of databases. We'll get into the details
of databases later on. Apart from database
source systems, you might also be consuming
data in the form of files, like text files, audio
files like Mp3s, or even video or
other types of files. While individual files
like these might not sound like something you
could call a source system, you'll find that in many cases, in your work as a data engineer, you need to download or be given access to files
to begin your work. Another common source
system that you'll encounter as a data
engineer is an API, which is short for application
programming interface. Simply put, an API
allows you to issue a web request for data and then get that data back
in a certain format, such as XML or JSON. You might also source data
through a sharing platform, which is something that
organizations may set up to share data internally
or with a third party. IoT devices, as I
mentioned earlier, represent yet another type of source system that is
becoming increasingly common. With this type of source system, you might have many
individual devices, what's known as a
swarm of IoT devices, streaming data in real time. This streaming data is
typically sent to a database, and the source system owner might make that data accessible via an API or a data
sharing platform. In other cases, you might
need to ingest and combine all those individual
streams of data for use in your own
downstream workflows. In a perfect world, the source systems
you depend on would deliver the data you need in a consistent and timely matter, such that you could build
downstream systems that rely on the predictability
of that source system. In the real world, however, source systems are
unpredictable. These systems sometimes go
down or the team managing the system changes the format
or schema of the data, or maybe the schema
stays the same, but the data itself changes. When I first started
working as a data engineer, I remember working with
a database that was maintained by an internal
team of software engineers. One day, that team decided to rearrange the columns in
their application database, and they didn't tell me
about these changes. I came to find out
that the columns that my data pipelines
relied on were changed, renamed, and some of
them were even deleted. This completely halted some of the downstream
data workflows, and I had to answer to some
pretty upset stakeholders, so that wasn't good. When you're accessing data from source systems is essential to understand how those systems are set up and what changes in the data or system
you can expect. This means that as
a data engineer, you'll be more successful
if you work directly with source system owners to understand how
those systems work, how they generate data, how that data may be subject
to change over time, and ultimately how those changes will impact the downstream
systems that you build. In my experience, developing good working relationships
with the stakeholders of source systems is an
underrated yet crucial part of successful data engineering. Depending on your source
systems and your goals, the next major phase of the
data engineering life cycle, ingestion can look quite different from one
project to the next. Join me in the
next video to take a look at ingestion
from source systems.