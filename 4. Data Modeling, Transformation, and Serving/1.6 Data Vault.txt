The Inmon and Kimball
modeling approaches focus on the structure of business
logic in the data warehouse. Whereas another modeling
approach called Data Vault focuses on separating the
structural aspects of data, meaning the business
entities and how they're related from the descriptive attributes of the data itself. It uses separate tables to represent core
business concepts, the relationships
between those concepts, and the descriptive attributes about those business concepts. You can follow a
Data Vault model to allow for a more
flexible, agile, and scalable data warehouse
structure by keeping the data as closely aligned
to the business as possible, even while the business
and its data are changing. Dan Linstedt introduced
Data Vault in the 1990s as a
different approach to modeling data in
the data warehouse. This approach has
evolved over time. Nowadays, the Data
Vault architecture consists of three layers, the staging area, the enterprise
data warehouse layer, and the information
delivery layer. You can load draw data from source systems into
the staging layer, and an insert only manner, meaning you don't alter the data or enforce
business logic, except to ensure that the
expected data type is ingested. Next, you model the data in the enterprise data warehouse
layer, using hubs, links, and satellites to separate
business objects and their relationships from
their descriptive attributes. We'll dive into this layer
in more detail later. Then finally, in the
information delivery layer, you load the data into downstream data marts
that can be modeled as star schemas or other structures to support
various business areas. Operations like
aggregation and grouping, which modify the meaning
of the data to meet user needs or applied in the
information delivery layer. Unlike other data modeling approaches you've
learned about so far, there's no notion of good, bad, or conformed data
in a Data Vault. You only change a structure
in which the data is stored. This way, you can easily trace the data in the data
warehouse back to its source, and you can avoid having
to restructure the data in the warehouse in case the
business requirements change. Let's take a closer
look at the model in the enterprise
data warehouse layer. The Data Vault model consists of three main types of tables,
as I mentioned before. These are hubs, links,
and satellites. In short, a hub stores a unique
list of business keys to represent a core business
concept such as customers, products, employees,
vendors, and others. A link connects two or more hubs to represent the relationship, transaction or event between two or more
business concepts. The links and hubs don't
contain descriptive data, that's actually stored
in the satellite tables. A satellite contains the
attributes that provide the descriptive context for
the hubs or other links. User will query a hub, which will link to a satellite table containing the query's relevant attributes. Let's go back to our e-commerce example and model the data as a Data Vault model by
following three key steps. First, you need to
model the hubs, which contain business keys. To identify the business keys, you can ask yourself, what is the identifiable
business element? How do users commonly
look for data? A business key can be
a column or a set of columns that the business uses to identify and locate the data, and it must not be
a key generated in or tied to a
particular source system. This way, you can
easily integrate these business elements from
different source systems. In a e-commerce example, the business concepts
you can model as hubs or a customer, order, store, and item. The business keys are a customer
ID for the customer hub, order ID for the order hub, store ID for the store hub, and skew for the item hub. These keys uniquely identify
each business element, and I assumed that the store ID, customer ID, and
order ID are keys generated by the business rather than being tied to
the source system. In addition to the
business keys, a hub must also contain three
additional standard fields. The hash key, which is a
calculated column consisting of a hash of the
business key column and use as a hubs primary key. The load date, which
represents the date on which the business key in a given row was first loaded into the hub, and the record source, which represents a
source from which the unique row is obtained. The next thing you need
to model are the links. You use a link table to
connect two or more hubs to capture the
relationships between the business keys of the hubs. Let's say you want to model the event of a customer
placing an order, you can add a link table to
connect the order hub to the customer hub to show which
customer placed the order. Then you can add a
link table to connect the item hub to the order hub to show which items
were ordered. Finally, you can
add a link table to connect the order hub to the store hub to show which store the
order was placed in. Each table must contain the primary and business
keys from its parent hubs, the load date of a row, and the source for the record. For each table, the
primary key consists of a hash calculated based on the business keys
of the parent hubs. With link tables, you can
easily add new relationships or update a current relationship without having to re
engineer the Data Vault. For example, let's
say the company decided to completely
change a sliding of business and instead of selling items at the sites
to sell services. In this case, you can create a new service hub table and a new link that connects this service hub
to the order hub, and then stop using the old
item hub and item order link. Moreover, the link tables can model a many to
many relationship. Let's say the organization
changes the rule and now allows more than one customer to contribute to the same order. You can use a link
table to model this new many
domain relationship between the customer
hub and the order hub. You don't need to change
anything in the design. Now, to give meaning
and descriptive context to the hubs and the links, and the third step, you can
create satellite tables. In this example, I created
a satellite table for the customer hub and added
some customer information, such as customer name
and customer zip code. You can add satellites
for the store, order and item hubs as well. I also created a
satellite table for the item order link to add
context to this relationship, namely the quantity of that
item placed in the order. Each satellite table must also
contain the record source, and for the primary key, it should consist of a hash key of the parent hub
and the load date. There you have an overview
of the Data Vault model. Data Vault provides a
flexible design that decouples the structure of your data from the
source systems, enabling you to easily adapt
as a business evolves. With that, we covered
the basics of a three most popular
data modeling approaches for data warehouses Inmon, Kimball, and Data Vault. However, the coverage
hardly does justice to their respective
complexity and nuance. In the resource section, I have listed some books from the creators of each modeling approach that I highly recommend you read to further
understand how and why data modeling is central
to batch analytical data. In recent years, an
approach known as one big table has emerged to model data for
analytical use cases. Join me in the next video
to explore one big table as the final data modeling
approach will cover this week.